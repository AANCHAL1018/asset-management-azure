@page "/assets"
@attribute [Authorize]
@using AssetManagementWASM.Models
@inject HttpClient Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using System.Text.Json

<link href="css/assets.css" rel="stylesheet" />

<div class="card">
    <div style="display:flex;justify-content:space-between;align-items:center;">
        <div>
            <h1>Assets</h1>
            <p style="color:var(--muted)">Manage your organization's assets and inventory</p>
        </div>
        <button class="btn-primary" @onclick="ShowAddForm">+ Add Asset</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-error" : "alert-success")">@message</div>
}

<div class="card">
    <!-- üîπ Filters Row -->
    <div class="filters-row">
        <input type="text" placeholder="üîç Search assets..." class="form-control"
               value="@searchTerm" @oninput="OnSearchChanged" />

        <select class="form-control" @bind="selectedStatus" @bind:event="onchange">
            <option value="">All Status</option>
            <option>Available</option>
            <option>Assigned</option>
            <option>Under Repair</option>
            <option>Retired</option>
        </select>

        <select class="form-control" @bind="selectedCondition" @bind:event="onchange">
            <option value="">All Conditions</option>
            <option>New</option>
            <option>Good</option>
            <option>Needs Repair</option>
            <option>Damaged</option>
        </select>

        <select class="form-control" @bind="selectedModel" @bind:event="onchange">
            <option value="">All Models</option>
            @foreach (var model in assets.Select(a => a.MakeModel).Where(m => !string.IsNullOrEmpty(m)).Distinct().OrderBy(m => m))
            {
                <option>@model</option>
            }
        </select>

        <button class="btn-reset" @onclick="ResetFilters">Reset</button>
    </div>

    <!-- üîπ Assets Table -->
    <table class="table">
        <thead>
            <tr>
                <th>Asset</th>
                <th>Type & Model</th>
                <th>Serial Number</th>
                <th>Status</th>
                <th>Condition</th>
                <th>Warranty</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredAssets == null)
            {
                <tr><td colspan="7"><em>Loading...</em></td></tr>
            }
            else if (filteredAssets.Count == 0)
            {
                <tr><td colspan="7">No assets found.</td></tr>
            }
            else
            {
                @foreach (var a in filteredAssets)
                {
                    <tr>
                        <td><strong>@a.Name</strong><div style="font-size:12px;color:var(--muted)">ID: @a.Id</div></td>
                        <td>@a.Type<br /><small style="color:var(--muted)">@a.MakeModel</small></td>
                        <td>@a.SerialNumber</td>
                        <td><span class="badge @GetStatusClass(a.Status)">@a.Status</span></td>
                        <td><span class="badge @GetConditionClass(a.Condition)">@a.Condition</span></td>
                        <td>üìÖ @a.WarrantyExpiryDate.ToString("MMM dd, yyyy")</td>
                        <td>
                            <button class="btn" title="Edit" @onclick="() => EditAsset(a)">‚úèÔ∏è</button>
                            <button class="btn" title="Delete" style="color:red" @onclick="() => DeleteAsset(a.Id)">üóëÔ∏è</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (showForm)
{
    <div class="card" style="margin-top:16px;">
        <h3>@(editingAsset.Id == 0 ? "Add New Asset" : "Edit Asset")</h3>

        <input class="form-control" placeholder="Name *" @bind="editingAsset.Name" />
        <input class="form-control" placeholder="Type *" @bind="editingAsset.Type" />
        <input class="form-control" placeholder="Make/Model" @bind="editingAsset.MakeModel" />
        <input class="form-control" placeholder="Serial Number *" @bind="editingAsset.SerialNumber" />

        <label>Condition *</label>
        <select class="form-control" @bind="editingAsset.Condition">
            <option>New</option>
            <option>Good</option>
            <option>Needs Repair</option>
            <option>Damaged</option>
        </select>

        <label>Warranty Expiry *</label>
        <input type="date" class="form-control" @bind="editingAsset.WarrantyExpiryDate" />

        <div style="margin-top:8px;">
            <button class="btn-primary" @onclick="SaveAsset">Save</button>
            <button class="btn" @onclick="() => showForm=false">Cancel</button>
        </div>
    </div>
}

@code {
    private List<Asset> assets = new();
    private List<Asset> filteredAssets = new();
    private Asset editingAsset = new();
    private bool showForm = false;
    private string searchTerm = "";
    private string message = "";
    private bool isError = false;

    // üîπ Filters
    private string selectedStatus = "";
    private string selectedCondition = "";
    private string selectedModel = "";

    protected override async Task OnInitializedAsync() => await LoadAssets();

    private async Task LoadAssets()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/assets");
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            assets = await response.Content.ReadFromJsonAsync<List<Asset>>() ?? new();
            ApplyFilter();
        }
        catch (HttpRequestException ex)
        {
            isError = true;
            message = $"‚ö†Ô∏è Failed to load assets. Please log in again.{ex.Message}";
        }
        catch (Exception ex)
        {
            isError = true;
            message = $"‚ö†Ô∏è Unexpected error: {ex.Message}";
        }
    }

    private void ApplyFilter()
    {
        filteredAssets = assets
            .Where(a =>
                (string.IsNullOrWhiteSpace(searchTerm) ||
                 a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 a.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 a.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(selectedStatus) || a.Status == selectedStatus) &&
                (string.IsNullOrEmpty(selectedCondition) || a.Condition == selectedCondition) &&
                (string.IsNullOrEmpty(selectedModel) || a.MakeModel == selectedModel)
            )
            .ToList();
    }

    private void ShowAddForm()
    {
        editingAsset = new Asset
        {
            CreatedDate = DateTime.Now,
            WarrantyExpiryDate = DateTime.Now.AddYears(1),
            Condition = "New"
        };
        showForm = true;
        message = "";
    }

    private void EditAsset(Asset asset)
    {
        editingAsset = new Asset
        {
            Id = asset.Id,
            Name = asset.Name,
            Type = asset.Type,
            MakeModel = asset.MakeModel,
            SerialNumber = asset.SerialNumber,
            Condition = asset.Condition,
            Status = asset.Status,
            WarrantyExpiryDate = asset.WarrantyExpiryDate,
            CreatedDate = asset.CreatedDate
        };
        showForm = true;
        message = "";
    }

    private async Task SaveAsset()
    {
        message = "";
        isError = false;

        if (string.IsNullOrWhiteSpace(editingAsset.Name) ||
            string.IsNullOrWhiteSpace(editingAsset.Type) ||
            string.IsNullOrWhiteSpace(editingAsset.SerialNumber))
        {
            message = "‚ö†Ô∏è Please fill all required fields.";
            isError = true;
            return;
        }

        var request = new HttpRequestMessage(
            editingAsset.Id == 0 ? HttpMethod.Post : HttpMethod.Put,
            editingAsset.Id == 0 ? "api/assets" : $"api/assets/{editingAsset.Id}"
        )
        {
            Content = JsonContent.Create(editingAsset)
        };
        request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            message = "‚úÖ Asset saved successfully.";
            showForm = false;
            await LoadAssets();
        }
        else
        {
            HandleErrorResponse(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task DeleteAsset(int id)
    {
        var request = new HttpRequestMessage(HttpMethod.Delete, $"api/assets/{id}");
        request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            message = "üóëÔ∏è Asset deleted successfully.";
            await LoadAssets();
        }
        else
        {
            HandleErrorResponse(await response.Content.ReadAsStringAsync());
        }
    }

    private string GetStatusClass(string status) =>
        status.ToLower() switch
        {
            "available" => "available",
            "assigned" => "assigned",
            "under repair" => "underrepair",
            "retired" => "retired",
            _ => ""
        };

    private string GetConditionClass(string condition) =>
        condition.ToLower() switch
        {
            "new" => "new",
            "good" => "good",
            "needs repair" => "needsrepair",
            "damaged" => "damaged",
            _ => ""
        };

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilter();
    }

    private void ResetFilters()
    {
        searchTerm = "";
        selectedStatus = "";
        selectedCondition = "";
        selectedModel = "";
        ApplyFilter();
    }

    private void HandleErrorResponse(string rawResponse)
    {
        isError = true;
        try
        {
            var errorObj = JsonSerializer.Deserialize<Dictionary<string, string>>(rawResponse);
            message = errorObj != null && errorObj.ContainsKey("message")
                ? $"‚ö†Ô∏è {errorObj["message"]}"
                : "‚ö†Ô∏è An unexpected error occurred.";
        }
        catch
        {
            message = $"‚ö†Ô∏è {rawResponse}";
        }
    }
}
